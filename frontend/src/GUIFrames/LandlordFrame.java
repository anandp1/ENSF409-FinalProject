
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUIFrames;

import backendclasses.*;
import database.Database;

import javax.swing.*;
import java.util.ArrayList;
import java.util.Objects;

/**
 *
 * @author Anand
 */
public class LandlordFrame extends javax.swing.JFrame {

    /**
     * Creates new form LandlordFrame
     */
    private final Database db;
    private final Integer landlordID;
    private final Landlord landlord;
    // requires database, landlord ID
    public LandlordFrame(Database db, String landlordID) {
        // makes GUI components
        initComponents();
        this.db = db;
        this.landlordID = Integer.valueOf(landlordID);
        landlord = new Landlord(this.landlordID, db);

        // needed to list all properties owned by the landlord
        ArrayList<Property> allProperties = landlord.getProperty();
        String[] propertyDisplay = new String[allProperties.size()];
        int i = 0;
        // construct each property to update the list
        for(Property properties : allProperties) {
            String isFurnished = (properties.getIsFurnished()) ? "Furnished" : "Not Furnished";
            propertyDisplay[i] = "<html>PropertyID: " + properties.getPropertyID() + "<br/>Address: "
                    + properties.getPropertyAddress() + "<br/>ApartmentType: " + ApartmentType.fromInt(properties.getApartmentType().getInt()) +
                    "<br/>Number of Bedrooms: " + properties.getNumBed() + "<br/>Number of Bathrooms: " + properties.getNumBath() +
                    "<br/>Quadrant: " + Quadrant.fromInt(properties.getQuadrant().getInt()) + "<br>Furnished State: " + isFurnished +
                    "<br/>Fee: " + String.valueOf(properties.getListing().getFee().getFeeAmount()) + "<br/>Period: " +
                    String.valueOf(properties.getListing().getFee().getPeriod()) + "<br/>Listing State: " +
                    State.fromInt(properties.getListing().getListingState().getInt()) + "<br/></html>";
            i++;
        }
        // set new list with the properties
        apartmentList.setModel(new javax.swing.AbstractListModel<String>() {
            //                String[] strings = { "No Matches", "NewItem" };
            public int getSize() { return propertyDisplay.length; }
            public String getElementAt(int i) { return propertyDisplay[i]; }
        });
        jScrollPane1.setViewportView(apartmentList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // auto generated code
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        isFurnished = new java.awt.Checkbox();
        apartmentType = new javax.swing.JComboBox<>();
        numBedrooms = new javax.swing.JComboBox<>();
        cityQuad = new javax.swing.JComboBox<>();
        addressInput = new javax.swing.JTextField();
        label7 = new java.awt.Label();
        numBathrooms = new javax.swing.JComboBox<>();
        register = new java.awt.Button();
        logout = new java.awt.Button();
        label8 = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        apartmentList = new javax.swing.JList<>();
        payFee = new java.awt.Button();
        changeListingState = new java.awt.Button();
        refresh = new java.awt.Button();
        viewMessages = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label1.setText("Register new property");

        label2.setText("Apartment Type:");

        label3.setText("# of Bedrooms:");

        label4.setText("City Quadrant:");

        label5.setText("Address:");

        label6.setText("Furnished:");

        apartmentType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Attached", "Detached", "Townhouse", "Apartment" }));

        numBedrooms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));

        cityQuad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SW", "NW", "NE", "SE" }));

        label7.setText("# of Bathrooms:");

        numBathrooms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));

        register.setLabel("Register");
        register.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registerMouseClicked(evt);
            }
        });

        logout.setLabel("Logout");
        logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutMouseClicked(evt);
            }
        });

        label8.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label8.setText("Apartment List");

        jScrollPane1.setViewportView(apartmentList);

        payFee.setLabel("Pay Fee & Post Property");
        payFee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                payFeeMouseClicked(evt);
            }
        });

        changeListingState.setLabel("Change Listing State");
        changeListingState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changeListingStateMouseClicked(evt);
            }
        });

        refresh.setLabel("Refresh");
        refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshMouseClicked(evt);
            }
        });
        viewMessages.setLabel("View Messages");
        viewMessages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewMessagesMouseClicked(evt);
            }
        });
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(viewMessages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(1, 1, 1)
                                                                .addComponent(isFurnished, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(register, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(addressInput, javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(cityQuad, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(numBedrooms, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(numBathrooms, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(apartmentType, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(label2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(45, 45, 45)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(changeListingState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(payFee, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(viewMessages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(payFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(12, 12, 12)
                                                .addComponent(changeListingState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(2, 2, 2)
                                                .addComponent(apartmentType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(1, 1, 1)
                                                .addComponent(numBedrooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(2, 2, 2)
                                                .addComponent(numBathrooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(2, 2, 2)
                                                .addComponent(cityQuad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(addressInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(20, 20, 20)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(isFurnished, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(register, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(46, 46, 46))))
        );

        pack();
    }// </editor-fold>
    // when register mouse button is clicked
    private void registerMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        // extract input data
        String apartmentText = Objects.requireNonNull(apartmentType.getSelectedItem()).toString();
        Integer numBath = Integer.valueOf(Objects.requireNonNull(numBedrooms.getSelectedItem()).toString());
        Integer numBed = Integer.valueOf(Objects.requireNonNull(numBathrooms.getSelectedItem()).toString());
        String cityQuadrant = Objects.requireNonNull(cityQuad.getSelectedItem()).toString();

        boolean furnishedState = isFurnished.getState();
        String propertyAddress = addressInput.getText();


        Property property = new Property(ApartmentType.fromInt(ApartmentType.fromString(apartmentText)), numBed, numBath, Quadrant.fromInt(Quadrant.fromString(cityQuadrant)), furnishedState, propertyAddress);
        // register property off of the entered data & error checking
        if(landlord.registerProperty(property)) {
            JOptionPane.showMessageDialog(this, "Successful!", "Success Message", JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            JOptionPane.showMessageDialog(this, "Failed!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    // pay fee button clicked
    private void payFeeMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        // error checking
        if(apartmentList.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(this, "No properties are selected", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else {
            // get property that needs to be updated
            String selectedProperty = apartmentList.getSelectedValue();
            StringBuilder propertyID = new StringBuilder();
            // extract ID of that property
            for (int i = 18; i < selectedProperty.length(); i++) {
                if (selectedProperty.charAt(i) == '<' || selectedProperty.charAt(i) == 'A') {
                    break;
                }
                propertyID.append(String.valueOf(selectedProperty.charAt(i)));

            }

            // get property that needs to be updated
            Property property = db.getPropertyWithListing(Integer.parseInt(propertyID.toString()));
            // error checking for if the payment is allowed to go through ex. the property is currently cancelled
            // and has a payable fee and period to it.
            // updates the database
            if(landlord.postPropertyWithListing(Integer.parseInt(propertyID.toString())) && property.getListing().getListingState().getInt() == 3){
                JOptionPane.showMessageDialog(this, "Successful!", "Success Message", JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                JOptionPane.showMessageDialog(this, "Failed!", "Error", JOptionPane.ERROR_MESSAGE);

            }

        }

    }
    // if change listing state button is clicked
    private void changeListingStateMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        // error checking
        if(apartmentList.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(this, "No properties are selected", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else {
            // get selected property
            String selectedProperty = apartmentList.getSelectedValue();
            StringBuilder propertyID = new StringBuilder();
            // extract property ID
            for (int i = 18; i < selectedProperty.length(); i++) {
                if (selectedProperty.charAt(i) == '<' || selectedProperty.charAt(i) == 'A') {
                    break;
                }
                propertyID.append(String.valueOf(selectedProperty.charAt(i)));

            }
            // show a new frame to show options for the available updates to the listing
            JFrame frame = new ChangeListingStatusFrame(db, Integer.valueOf(propertyID.toString()));
            frame.setVisible(true);
        }
    }
    // refresh button is clicked
    // refreshes to show updated properties that the landlord is incharge of
    private void refreshMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        // get all properties
        ArrayList<Property> allProperties = landlord.getProperty();
        // error checking
        if(allProperties.isEmpty()) {
            apartmentList.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = {"No Properties"};
                public int getSize() { return strings.length; }
                public String getElementAt(int i) { return strings[i]; }
            });
        }
        else {

            String[] propertyDisplay = new String[allProperties.size()];
            int i = 0;
            // construct all properties for each option in the list
            for(Property properties : allProperties) {
                String isFurnished = (properties.getIsFurnished()) ? "Furnished" : "Not Furnished";
                propertyDisplay[i] = "<html>PropertyID: " + properties.getPropertyID() + "<br/>Address: "
                        + properties.getPropertyAddress() + "<br/>ApartmentType: " + ApartmentType.fromInt(properties.getApartmentType().getInt()) +
                        "<br/>Number of Bedrooms: " + properties.getNumBed() + "<br/>Number of Bathrooms: " + properties.getNumBath() +
                        "<br/>Quadrant: " + Quadrant.fromInt(properties.getQuadrant().getInt()) + "<br>Furnished State: " + isFurnished +
                        "<br/>Fee: " + String.valueOf(properties.getListing().getFee().getFeeAmount()) + "<br/>Period: " +
                        String.valueOf(properties.getListing().getFee().getPeriod()) + "<br/>Listing State: " +
                        State.fromInt(properties.getListing().getListingState().getInt()) + "<br/></html>";
                i++;
            }
            // set the list to be updated to each option
            apartmentList.setModel(new javax.swing.AbstractListModel<String>() {
                //                String[] strings = { "No Matches", "NewItem" };
                public int getSize() { return propertyDisplay.length; }
                public String getElementAt(int i) { return propertyDisplay[i]; }
            });
        }
    }
    // logout button is clicked
    private void logoutMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        // gets rid of this frame and shows the base frame
        this.dispose();
        new BaseFrame(db).setVisible(true);
    }
    // view messages button is clicked
    private void viewMessagesMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        // get all messages send to this landlord
        ArrayList<Message> messages = landlord.getMessages(landlordID);
        // show the messages as a new frame
        JFrame frame =new MessagesFrame(db, messages);
        frame.setVisible(true);
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(LandlordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(LandlordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(LandlordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(LandlordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new LandlordFrame().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify
    private javax.swing.JTextField addressInput;
    private javax.swing.JList<String> apartmentList;
    private javax.swing.JComboBox<String> apartmentType;
    private java.awt.Button changeListingState;
    private javax.swing.JComboBox<String> cityQuad;
    private java.awt.Checkbox isFurnished;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Button logout;
    private javax.swing.JComboBox<String> numBathrooms;
    private javax.swing.JComboBox<String> numBedrooms;
    private java.awt.Button payFee;
    private java.awt.Button refresh;
    private java.awt.Button register;
    private java.awt.Button viewMessages;
    // End of variables declaration
}

